<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script type="text/javascript">
  var width = 800;
  var height = 800;
  // nodeの定義。ここを増やすと楽しい
  var nodes = [
    { id: 0, label: "A" },
    { id: 1, label: "B" },
    { id: 2, label: "C" },
    { id: 3, label: "D" },
    { id: 4, label: "E" },
    { id: 5, label: "F" },
    { id: 6, label: "G" },
    { id: 7, label: "H" },
    { id: 8, label: "I" },
    { id: 9, label: "J" },
    { id: 10, label: "K" },
    { id: 11, label: "L" },
    { id: 12, label: "M" },
    { id: 13, label: "N" }

  ];

  // nodeどうしの紐付け設定。ここをどう作るかが難しい。
  var links = [
    { source: 0, target: 1 },
    { source: 0, target: 2 },
    { source: 0, target: 3 },
    { source: 0, target: 4 },
    { source: 0, target: 5 },
    { source: 0, target: 6 },
    { source: 0, target: 7 },
    { source: 3, target: 3 },
    { source: 4, target: 2 },
    { source: 4, target: 1 },
    { source: 5, target: 6 },
    { source: 6, target: 7 },
    { source: 6, target: 1 },
    { source: 7, target: 1 },
    { source: 7, target: 2 },
    { source: 8, target: 8 },
    { source: 9, target: 9 },
    { source: 9, target: 10 },
    { source: 9, target: 11 },
    { source: 9, target: 12 },
    { source: 10, target: 12 },
    { source: 11, target: 8 },
    { source: 11, target: 13 },
    { source: 12, target: 11 },
    { source: 12, target: 5 },
    { source: 13, target: 9 },


  ];
  // forceLayout自体の設定はここ。ここをいじると楽しい。
  var force = d3.layout.force()
      .nodes(nodes)
      .links(links)
      .size([width, height])
      .distance(200) // node同士の距離
      .friction(0.5) // 摩擦力(加速度)的なものらしい。
      .charge(10) // 寄っていこうとする力。推進力(反発力)というらしい。
      .gravity(0) // 画面の中央に引っ張る力。引力。
      .start();

  // svg領域の作成
  var svg = d3.select("body")
      .append("svg")
      .attr({width:width, height:height});

  // link線の描画(svgのline描画機能を利用)
  var link = svg.selectAll("line")
      .data(links)
      .enter()
      .append("line")
      .style({stroke: "#ccc",
      "stroke-width": 5
  });

  // nodesの描画(今回はsvgの円描画機能を利用)
  var node = svg.selectAll("circle")
      .data(nodes)
      .enter()
      .append("circle")
      .attr({ // せっかくなので半径をランダムに
          r: function() {return Math.random() * (70 - 10) + 10;}
        })
      .style({
          fill: "orange"
      })
      .call(force.drag);

  // nodeのラベル周りの設定
  var label = svg.selectAll('text')
      .data(nodes)
      .enter()
      .append('text')
      .attr({
          "text-anchor":"middle",
          "fill":"white",
          "font-size": "9px"
      })
      .text(function(data) { return data.label; });

  // tickイベント(力学計算が起こるたびに呼ばれるらしいので、座標追従などはここで)
  force.on("tick", function() {
      link.attr({
          x1: function(data) { return data.source.x;},
          y1: function(data) { return data.source.y;},
          x2: function(data) { return data.target.x;},
          y2: function(data) { return data.target.y;}
      });
      node.attr({
          cx: function(data) { return data.x;},
          cy: function(data) { return data.y;}
      });
      // labelも追随するように
      label.attr({
          x: function(data) { return data.x;},
          y: function(data) { return data.y;}
      });
  });
</script>
